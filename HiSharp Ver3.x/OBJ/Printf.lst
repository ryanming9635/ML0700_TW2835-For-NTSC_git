C51 COMPILER V9.60.0.0   PRINTF                                                            07/02/2021 11:21:59 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE PRINTF
OBJECT MODULE PLACED IN .\OBJ\Printf.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Printf.c LARGE OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\OBJ\P
                    -rintf.lst) TABS(2) OBJECT(.\OBJ\Printf.obj)

line level    source

   1          /*****************************************************************************/
   2          /*                                                                                              */
   3          /*  TELI ML070I   MCU                                             */
   4          /*                                                                                              */
   5          /*  Printf.c                                                                    */
   6          /*                                                                                              */
   7          /*****************************************************************************/
   8          #if 0
              #include "VXIS_Extern_Define.h"
              
              #include "tpinc/Device_Rx.h"
              #include "tpinc/TP2802.h"
              #include "stdlib.h"
              #include "VX_swi2c.h"
              #include "VS4210.h"
              
              //#include "Config.h"
              
              //#ifdef SERIAL
              
              //#include "reg.h"
              //#include "Typedefs.h"
              //#include "debug.h"
              //#include "main.h"
              #include "printf.h"
              #include "monitor.h"
              
              #include <stdarg.h>
              #else
  30          //#include "stdlib.h"
  31          #include <stdarg.h>
  32          
  33          
  34          #include "Types.h"
  35          #include "Main.h"
  36          #include "Timer.h"
  37          #include "UART.h"
  38          #include "BusCtrl.h"
  39          #include "TW2835_Init.h"
  40          #include "CommandShell.h"
  41          #include "OSDAction.h"
  42          
  43          #include "Printf.h"
  44          #include "monitor.h"
  45          
  46          #endif
  47          
  48          #define DWORD U32
  49          #define _FALSE 0
  50          
  51          static const char *_PrintColor[] = {
  52          "\033[0m",
  53          "\033[0;31m",
  54          "\033[0;32m",
C51 COMPILER V9.60.0.0   PRINTF                                                            07/02/2021 11:21:59 PAGE 2   

  55          "\033[0;33m",
  56          "\033[0;34m",
  57          "\033[0;35m",
  58          "\033[0;36m",
  59          "\033[0;37m",
  60          };
  61          
  62          CODE BYTE Hex[] = "0123456789ABCDEF";
  63          extern  bit       RS_Xbusy;     // bit RS_Xbusy=0;
  64          extern  BYTE  DebugLevel;
  65          extern BYTE Monitor_flag;
  66          
  67          
  68          void DoPrint( const char CODE_P *fmt, va_list ap )
  69          {
  70   1        char  ch;
  71   1        char  i;
  72   1        long  value=_FALSE;
  73   1        bit   fl_zero;
  74   1      //  bit   fl_num;
  75   1        BYTE  fl_len;
  76   1        BYTE  cnt;
  77   1        DWORD mask=1;
  78   1      
  79   1        #ifdef KEILC
  80   1        char *ptr;
  81   1        #endif
  82   1      
  83   1        while(1) {
  84   2          
  85   2          //----- Find Formatter % -----
  86   2      
  87   2          switch( ch = *fmt++ ) {
  88   3            case 0:   return;
  89   3            case '%': if( *fmt != '%' ) break;
  90   3                  fmt++;
  91   3            default:  _outchar( ch );
  92   3                  continue;
  93   3          }
  94   2      
  95   2          //----- Get Count -------------
  96   2          
  97   2          fl_zero = 0;
  98   2          //fl_num = 0;
  99   2          cnt = 0;
 100   2      
 101   2          ch = *fmt++;
 102   2      
 103   2          if( ch=='0' ) {
 104   3            fl_zero = 1;
 105   3            ch = *fmt++;
 106   3            cnt = ch - '0';
 107   3            ch = *fmt++;
 108   3          }
 109   2          else if( ch>='0' && ch<='9' ) {
 110   3            cnt = ch - '0';
 111   3            ch = *fmt++;
 112   3          }
 113   2      
 114   2          //----- Get char(B) / int / long(L) ----------------
 115   2      
 116   2          fl_len = 2;
C51 COMPILER V9.60.0.0   PRINTF                                                            07/02/2021 11:21:59 PAGE 3   

 117   2      
 118   2          switch(ch) {
 119   3          case 'l':
 120   3          case 'L': ch = *fmt++;  fl_len = 4;   break;
 121   3          case 'b':
 122   3          case 'B': ch = *fmt++;  fl_len = 1;   break;
 123   3          }   
 124   2      
 125   2          //----- Get Type Discriptor -----
 126   2          
 127   2          switch( ch ) {
 128   3      
 129   3            case 'd':
 130   3            case 'u':
 131   3      
 132   3              switch (fl_len) {
 133   4              case 1:
 134   4                #if 1//ryan@20200511
 135   4                if( ch=='d' ) value = (int)va_arg( ap, int );
 136   4                else          value = (int)va_arg( ap, int );
 137   4      
 138   4                #else
                        if( ch=='d' ) value = (char)va_arg( ap, char );
                        else          value = (BYTE)va_arg( ap, BYTE );
                        #endif
 142   4                break;
 143   4              
 144   4              case 2:
 145   4                if( ch=='d' ) value = (int)va_arg( ap,  int );
 146   4                else          value = (WORD)va_arg( ap, WORD );
 147   4                break;
 148   4      
 149   4              case 4:
 150   4                if( ch=='d' ) value = (long)va_arg( ap, long );
 151   4                else          value = (DWORD)va_arg( ap, DWORD );
 152   4                break;
 153   4              }
 154   3      
 155   3              if( value<0 ) {
 156   4                _outchar('-');
 157   4                value = value*(-1);
 158   4              }
 159   3      
 160   3              if(cnt==0) {
 161   4                if( value==0 ) { _outchar('0'); continue; }
 162   4      
 163   4                for(cnt=0, mask=1; cnt<10; cnt++) {
 164   5                  if( (value/mask)==0 ) break;
 165   5                  mask = mask*10;
 166   5                }
 167   4              }
 168   3      
 169   3              for(i=0, mask=1; i<cnt-1; i++) mask = mask*10;
 170   3      
 171   3              while(1) {
 172   4                ch = (value / mask) + '0';
 173   4                if( ch=='0' && fl_zero==0 && mask!=1 ) ch=' ';
 174   4                else fl_zero = 1;
 175   4                _outchar(ch);
 176   4      
 177   4                value = value % (mask);
 178   4                mask = mask / 10;
C51 COMPILER V9.60.0.0   PRINTF                                                            07/02/2021 11:21:59 PAGE 4   

 179   4                
 180   4                if( mask==0 )
 181   4                  break;
 182   4              }
 183   3              continue;
 184   3      
 185   3            case 'x':
 186   3            case 'X':
 187   3      
 188   3              switch (fl_len) {
 189   4                #if 1//ryan@20200511
 190   4                case 1: value = (int)va_arg( ap, int);    break;
 191   4                #else
                      case 1: value = (BYTE)va_arg( ap, BYTE );   break;
                      #endif
 194   4              case 2: value = (WORD)va_arg( ap, WORD );   break;
 195   4              case 4: value = (DWORD)va_arg( ap, DWORD );   break;
 196   4              }
 197   3      
 198   3              if(cnt==0) cnt = fl_len*2;
 199   3      
 200   3              for(i=0; i<cnt; i++) {
 201   4                _outchar( Hex[(value >> (cnt-i-1)*4) & 0x000f] );
 202   4              }
 203   3              continue;
 204   3      
 205   3            case 's':
 206   3      
 207   3              #ifdef TASKINGC
                      
                      value = (WORD)va_arg( ap, WORD );
                      while(*(char CODE_P *)value!='\0')
                        _outchar(*(char CODE_P *)value++);
                      continue;
              
                      #elif defined KEILC
 215   3              
 216   3              ptr = (char *)va_arg( ap, char* );
 217   3              while(*ptr!='\0')
 218   3                _outchar(*ptr++);
 219   3              continue;
 220   3      
 221   3              #endif
 222   3      
 223   3      
 224   3            case 'c':
 225   3              value = va_arg( ap, int );
 226   3                _outchar((BYTE)value);
 227   3              continue;
 228   3      
 229   3            default:
 230   3              value = (WORD)va_arg( ap, int );
 231   3              continue;
 232   3          }
 233   2        }
 234   1      }
 235          
 236          //===========================================================================//
 237          //                                                                           //
 238          //===========================================================================//
 239          //va_list ap;
 240          
C51 COMPILER V9.60.0.0   PRINTF                                                            07/02/2021 11:21:59 PAGE 5   

 241          void Printf( const char CODE_P *fmt, ... )
 242          {
 243   1        va_list ap;
 244   1      
 245   1        va_start(ap, fmt);
 246   1        DoPrint( fmt, ap );
 247   1        va_end( ap );
 248   1      }
 249          #if (HS_DEBUG==ON)
 250          void DEBUG_MESSAGE( const char CODE_P *fmt, ... )
 251          {
 252   1        va_list ap;
 253   1        va_start(ap, fmt);
 254   1      #ifdef HS_DEBUG
 255   1        DoPrint( fmt, ap );
 256   1      #endif
 257   1        va_end( ap );
 258   1      
 259   1      }
 260          #endif
 261          void Puts( CODE_P char *ptr )
 262          {
 263   1        while(*ptr!='\0')
 264   1          RS_tx(*ptr++);
 265   1      }
 266          
 267          
 268          //===========================================================================//
 269          //                                                                           //
 270          //===========================================================================//
 271          #ifdef DEBUG
              
              void dPrintf( const char CODE_P *fmt, ... )
              {
                va_list ap;
              
                if( DebugLevel >= DEBUG_INFO ) {
                  va_start(ap, fmt);
                  DoPrint( fmt, ap );
                  va_end( ap );
                }
              }
              /*
              void wPrintf( const char CODE_P *fmt, ... )
              {
                va_list ap;
              
                if( DebugLevel >= DEBUG_WARN ) {
                  va_start(ap, fmt);
                  DoPrint( fmt, ap );
                  va_end( ap );
                }
              }
              */
              
              /*
              
              void ePrintf( const char CODE_P *fmt, ... )
              {
                va_list ap;
              
                if( DebugLevel >= DEBUG_ERR ) {
C51 COMPILER V9.60.0.0   PRINTF                                                            07/02/2021 11:21:59 PAGE 6   

                  va_start(ap, fmt);
                  DoPrint( fmt, ap );
                  va_end( ap );
                }
              }
              */
              //===========================================================================//
              //                                                                           //
              //===========================================================================//
              void dPuts( CODE_P char *ptr )
              {
                if( DebugLevel >= DEBUG_INFO ) {
                  while(*ptr!='\0')
                    RS_tx(*ptr++);
                }
              }
              
              #if defined( SUPPORT_PC ) || defined( SUPPORT_DTV ) || defined( DEBUG_SETPANEL)
              void wPuts( CODE_P char *ptr )
              {
                if( DebugLevel >= DEBUG_WARN ) {
                  while(*ptr!='\0')
                    RS_tx(*ptr++);
                }
              }
              
              void ePuts( CODE_P char *ptr )
              {
                if( DebugLevel >= DEBUG_ERR ) {
                  while(*ptr!='\0')
                    RS_tx(*ptr++);
                }
              }
              #endif
              
              #endif // DEBUG
 339          
 340          //===========================================================================//
 341          //                                                                          GraphicsPrint
 342          //===========================================================================//
 343          #if (HS_DEBUG==ON)
 344          void GraphicsPrint(PRINT_COLOR_e mode, const char *Message, ...)
 345          {
 346   1      
 347   1          #if (_DEBUG_MESSAGE_COLOR_MESSAGE==ON)
              
                  va_list ap;
              
                  #if (_DEBUG_MESSAGE_Monitor==ON)
                  if( Monitor_flag==_TRUE)
                  ;
                  else
                  #endif      
                    {
              
                  DEBUG_MESSAGE( _PrintColor[mode]);
                  va_start(ap, Message);
                  DoPrint( Message, ap );
                  va_end( ap );
                  DEBUG_MESSAGE( _PrintColor[PRINT_COLOR_BLACK]);
                    }
                  #else
C51 COMPILER V9.60.0.0   PRINTF                                                            07/02/2021 11:21:59 PAGE 7   

 365   1            va_list ap;
 366   1            va_start(ap, Message);
 367   1            DoPrint( Message, ap );
 368   1            va_end( ap );
 369   1            mode=1;
 370   1            
 371   1          #endif
 372   1        
 373   1      }
 374          #endif
 375          
 376          //===========================================================================//
 377          //                                                                           //
 378          //===========================================================================//
 379          /*
 380          #ifdef DEBUG
 381          BYTE Getch(void)
 382          {
 383            while(!RS_ready());
 384            return RS_rx();
 385          }
 386          #endif
 387          */
 388          #if 0
              BYTE Getche(void)
              {
                BYTE ch;
              
                while(!RS_ready());
                ch = RS_rx();
                RS_tx(ch);
              
                return ch;
              }
              #endif
 400          
 401          //#endif  // SERIAL


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1190    ----
   CONSTANT SIZE    =     61    ----
   XDATA SIZE       =     41     163
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
