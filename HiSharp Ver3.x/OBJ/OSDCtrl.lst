C51 COMPILER V9.50a   OSDCTRL                                                              03/28/2018 18:26:36 PAGE 1   


C51 COMPILER V9.50a, COMPILATION OF MODULE OSDCTRL
OBJECT MODULE PLACED IN .\OBJ\OSDCtrl.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE OSDCtrl.c COMPACT OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\OBJ\O
                    -SDCtrl.lst) TABS(2) OBJECT(.\OBJ\OSDCtrl.obj)

line level    source

   1          //  **************************************************************************
   2          //
   3          //       Copyright (c) 1992-2006 Professonal Computer Technology Co., Ltd
   4          //
   5          //      All rights are reserved. Reproduction in whole or in parts is
   6          //  prohibited without the prior written consent of the copyright owner.
   7          //  --------------------------------------------------------------------------
   8          //
   9          //  Module: OSDCtrl.C
  10          //
  11          //  Purpose: Implementation of OSD Control.
  12          //
  13          //  Version: 0.01                                   2006/12/13 05:12¤U¤È
  14          //
  15          //  Compiler: Keil 8051 C Compiler v7.2
  16          //
  17          //  Reference:
  18          //
  19          //
  20          //
  21          //  --------------------------------------------------------------------------
  22          //  Modification:
  23          //
  24          //  R0.01 2006/12/13 05:12¤U¤È Phoenix Chuang
  25          //  Reason:
  26          //    1. Original.
  27          //  Solution:
  28          //  
  29          //  **************************************************************************
  30          //  -----------------------------------
  31          //      Header Files
  32          //  ----------------------------------- 
  33          #include "Types.h"
  34          #include "OSDCtrl.h"
  35          #include "BusCtrl.h"
  36          
  37          #include "Font.h"
  38          #include "Main.h"  //Pinchi 20150324 add
  39          
  40          
  41          //  ------------------------------------
  42          //      Macro Definitions
  43          //  ------------------------------------ 
  44          #define WriteByteOSD(b, c)      PCT_WriteAsicByte(0, DVC_PG2, b, c)
  45          #define ReadByteOSD(a)        PCT_ReadAsicByte(0, DVC_PG2, a)
  46          #define ReadOSDMemWr()        PCT_ReadAsicByte(0, DVC_PG2,0x0A)
  47          #define ReadOSDBufWr()        PCT_ReadAsicByte(0, DVC_PG2,0x04)
  48          
  49          
  50          //  ------------------------------------
  51          //      Type Definitions
  52          //  ------------------------------------
  53          
  54          
C51 COMPILER V9.50a   OSDCTRL                                                              03/28/2018 18:26:36 PAGE 2   

  55          //  ------------------------------------
  56          //      Variables Definitions
  57          //  ------------------------------------
  58            U8 bdata bitdat;
  59            sbit DAT_BIT0 = bitdat^0;
  60            sbit DAT_BIT1 = bitdat^1;
  61            sbit DAT_BIT2 = bitdat^2;
  62            sbit DAT_BIT3 = bitdat^3;
  63            sbit DAT_BIT4 = bitdat^4;
  64            sbit DAT_BIT5 = bitdat^5;
  65            sbit DAT_BIT6 = bitdat^6;
  66            sbit DAT_BIT7 = bitdat^7;
  67          
  68            data U8 foreColor;
  69            data U8 backColor;
  70          
  71          //  ------------------------------------
  72          //      Function Prototypes
  73          //  ------------------------------------
  74          
  75          // ===========================================================================
  76          //                      Parallel function description
  77          // ===========================================================================
  78          //
  79          // Set Foreground Color range:0-63
  80          //
  81          void PCT_PreSetForegroundColor(U8 _color)
  82          {
  83   1        foreColor = _color;
  84   1        //printf("=== Fore Color = %bx === \n", foreColor);
  85   1      }
  86          
  87          // ===========================================================================
  88          //
  89          // Set Foreground Color range:0-63
  90          //
  91          void PCT_PreSetBackgroundColor(U8 _color)
  92          {
  93   1        backColor = _color;
  94   1        //printf("=== Back Color = %bx === \n", backColor);
  95   1      }
  96          
  97          // ===========================================================================
  98          //
  99          // Set OSD Index Color Table  
 100          //
 101          void PCT_SetOSDColor(U8 _pth, U8 _col_num, U8 _y, U8 _cb, U8 _cr)
 102          {
 103   1        WriteByteOSD(0x0b, _y);           //... Y
 104   1        WriteByteOSD(0x0c, _cb);          //... Cb
 105   1        WriteByteOSD(0x0d, _cr);          //... Cr
 106   1      #ifdef TW2835_FUNC_DEFINE  //Pinchi 20150324 add
 107   1        _ifBitSet(_pth,PTH_X)
 108   1      #else
                ifBitSet(_pth,PTH_X)
              #endif
 111   1          WriteByteOSD(0x0e, BIT7|_col_num);    //... address
 112   1        else
 113   1          WriteByteOSD(0x0e, BIT7|BIT6|_col_num); //... address
 114   1      }
 115          
 116          // ===========================================================================
C51 COMPILER V9.50a   OSDCTRL                                                              03/28/2018 18:26:36 PAGE 3   

 117          //
 118          //    
 119          //
 120          void PCT_InitOSDColor(void)
 121          {
 122   1        WriteByteOSD(0x1F, 0xC0);//<William-960820>blink DELAY2Sec
 123   1        WriteByteOSD(0x0F, 0x0C);
 124   1        PCT_SetOSDColor(PTH_Y, OSD_COL_RED, 0x4c,0x54,0xff);
 125   1        PCT_SetOSDColor(PTH_Y, OSD_COL_GRN, 76, 84, 74);
 126   1        PCT_SetOSDColor(PTH_Y, OSD_COL_BLU, 0x1d,0xff,0x6b);
 127   1      
 128   1        PCT_SetOSDColor(PTH_X, OSD_COL_BLK, 0x00,0x80,0x80);
 129   1        PCT_SetOSDColor(PTH_X, OSD_COL_RED, 0x4c,0x54,0xff);
 130   1        PCT_SetOSDColor(PTH_X, OSD_COL_GRN, 0x4B, 0x55, 0x4A);
 131   1        PCT_SetOSDColor(PTH_X, OSD_COL_BLU, 0x1d,0xff,0x6b);
 132   1        PCT_SetOSDColor(PTH_X, OSD_COL_100WHT,0xf0,0x80,0x80);
 133   1        PCT_SetOSDColor(PTH_X, OSD_COL_75WHT, 0xc0,0x80,0x80);
 134   1        PCT_SetOSDColor(PTH_X, OSD_COL_50WHT, 0x7f,0x80,0x80);
 135   1        PCT_SetOSDColor(PTH_X, OSD_COL_25WHT, 0x3f,0x80,0x80);
 136   1        PCT_SetOSDColor(PTH_X, OSD_COL_ORNG, 0x95,0x4f,0xb5);
 137   1        PCT_SetOSDColor(PTH_X, OSD_COL_CYN, 0xb2,0xaa,0x00);
 138   1        PCT_SetOSDColor(PTH_X, OSD_COL_MGN, 0x69,0xd4,0xea);
 139   1        PCT_SetOSDColor(PTH_X, OSD_COL_OCN, 0x61,0xb5,0x3a);
 140   1        PCT_SetOSDColor(PTH_X, OSD_COL_YLW, 0xE1, 0x00, 0x94);
 141   1        PCT_SetOSDColor(PTH_X, OSD_COL_RED255, 0x4c,0x54,0xff);
 142   1      
 143   1        backColor=0;
 144   1        foreColor=0;
 145   1      }
 146          
 147          // ===========================================================================
 148          //
 149          //  Setting Page for Draw OSD 
 150          //
 151          void PCT_SetOSDDrawPage(U8 _page)
 152          {
 153   1        _page = (_page<<2) | (ReadByteOSD(0x0A)&0xC3);
 154   1        WriteByteOSD(0x0A, _page);
 155   1      }
 156          
 157          // ===========================================================================
 158          //
 159          //  Enable OSD Page 0:OFF 1-6:Page 1-6 ON 
 160          //
 161          void PCT_EnShowOSDPage(U8 _page)
 162          {
 163   1        if(_page == WRPHY_PAGE0) {
 164   2          _page = (_page&0x07)<<4|(ReadByteOSD(0x0F)&0x0F);
 165   2          WriteByteOSD(0x0F, SetBit(_page, BIT1));
 166   2        } else {
 167   2          _page = (_page&0x07)<<4|(ReadByteOSD(0x0F)&0x0F);
 168   2          WriteByteOSD(0x0F, SetBit(_page, BIT3));
 169   2        }
 170   1      }
 171          
 172          // ===========================================================================
 173          //
 174          //  Disable OSD Page Path X
 175          //
 176          void PCT_DisShowOSDPage(U8 _bit)
 177          {
 178   1        register dat;
C51 COMPILER V9.50a   OSDCTRL                                                              03/28/2018 18:26:36 PAGE 4   

 179   1        dat = (ReadByteOSD(0x0F)&0x0F);
 180   1        WriteByteOSD(0x0F, ClearBit(dat, _bit));
 181   1      }
 182          
 183          // ===========================================================================
 184          //
 185          // Full Color on OSD of X Channel 
 186          // _posx  : Start point for Horizontal (unit = 8 Dots)
 187          // _posy  : Start point for Vertical   (unit = 8 Dots)
 188          //
 189          void PCT_FullColorOnOSD(U8 _posx, U16 _posy, U8 _wide, U16 _high)
 190          {
 191   1        WriteByteOSD(0x00, backColor);    //... 1st pixel
 192   1        WriteByteOSD(0x01, backColor);    //... 2nd pixel
 193   1        WriteByteOSD(0x02, backColor);    //... 3rd pixel
 194   1        WriteByteOSD(0x03, backColor);    //... 4th pixel
 195   1      
 196   1        _posx <<= 1;
 197   1        _posy <<= 3;
 198   1        _wide = _posx+((_wide)<<1)-1;
 199   1        _high = _posy+((_high)<<3)-1;
 200   1      
 201   1        WriteByteOSD(0x05, _posx);
 202   1        WriteByteOSD(0x06, _wide);
 203   1        WriteByteOSD(0x07, _posy&0xff);
 204   1        WriteByteOSD(0x08, _high&0xff);
 205   1        WriteByteOSD(0x09, 0x02|((_posy>>8)<<2)+(_high>>8));  //... ~ even field
 206   1      
 207   1        WriteByteOSD(0x0A, 0xc0|ReadByteOSD(0x0A));     //... acceleration|x path
 208   1        while(ReadOSDMemWr()&BIT7){}  //... wait finishing write for even field
 209   1      }
 210          
 211          void PCT_ClearOSDPageX(U8 _page)
 212          {
 213   1        PCT_SetOSDDrawPage(_page);
 214   1      
 215   1        PCT_PreSetBackgroundColor(OSD_COL_CLR);
 216   1        PCT_FullColorOnOSD(0,0,90,38);
 217   1      }
 218          
 219          // ===========================================================================
 220          //
 221          // Draw 16 Dots to OSD Dtat Buuffer 0-15
 222          //
 223          void PCT_WriteOSDDataBufferX(U8 _index, PU8 _dat)
 224          {
 225   1        bitdat = _dat[0];
 226   1        WriteByteOSD(0x00, DAT_BIT7 ? (foreColor) : (backColor));   //... 1st pixel
 227   1        WriteByteOSD(0x01, DAT_BIT6 ? (foreColor) : (backColor));   //... 2nd pixel
 228   1        WriteByteOSD(0x02, DAT_BIT5 ? (foreColor) : (backColor));   //... 3rd pixel
 229   1        WriteByteOSD(0x03, DAT_BIT4 ? (foreColor) : (backColor));   //... 4th pixel
 230   1        WriteByteOSD(0x04, 0x80|_index);      //... write to buffer
 231   1        _index++;
 232   1        
 233   1        WriteByteOSD(0x00, DAT_BIT3 ? (foreColor) : (backColor));   //... 1st pixel
 234   1        WriteByteOSD(0x01, DAT_BIT2 ? (foreColor) : (backColor));   //... 2nd pixel
 235   1        WriteByteOSD(0x02, DAT_BIT1 ? (foreColor) : (backColor));   //... 3rd pixel
 236   1        WriteByteOSD(0x03, DAT_BIT0 ? (foreColor) : (backColor));   //... 4th pixel
 237   1        WriteByteOSD(0x04, 0x80|_index);      //... write to buffer
 238   1        _index++;
 239   1        
 240   1        bitdat = _dat[1];
C51 COMPILER V9.50a   OSDCTRL                                                              03/28/2018 18:26:36 PAGE 5   

 241   1        WriteByteOSD(0x00, DAT_BIT7 ? (foreColor) : (backColor));   //... 1st pixel
 242   1        WriteByteOSD(0x01, DAT_BIT6 ? (foreColor) : (backColor));   //... 2nd pixel
 243   1        WriteByteOSD(0x02, DAT_BIT5 ? (foreColor) : (backColor));   //... 3rd pixel
 244   1        WriteByteOSD(0x03, DAT_BIT4 ? (foreColor) : (backColor));   //... 4th pixel
 245   1        WriteByteOSD(0x04, 0x80|_index);      //... write to buffer
 246   1        _index++;
 247   1        
 248   1        WriteByteOSD(0x00, DAT_BIT3 ? (foreColor) : (backColor));   //... 1st pixel
 249   1        WriteByteOSD(0x01, DAT_BIT2 ? (foreColor) : (backColor));   //... 2nd pixel
 250   1        WriteByteOSD(0x02, DAT_BIT1 ? (foreColor) : (backColor));   //... 3rd pixel
 251   1        WriteByteOSD(0x03, DAT_BIT0 ? (foreColor) : (backColor));   //... 4th pixel
 252   1        WriteByteOSD(0x04, 0x80|_index);      //... write to buffer
 253   1      }
 254          
 255          // ===========================================================================
 256          //
 257          // Draw 16x16 Dots for word, tatal 4 words is 64 x 16 Dots
 258          // _posx  : Start point for Horizontal (unit = 8 Dots)
 259          // _posy  : Start point for Vertical   (unit = 8 Dots)
 260          // _len   : 1-4: 1-4 words
 261          // _index : Ascii code for string
 262          //
 263          void PCT_WriteOSDFntX(U8 _posx, U16 _posy, U8 _len, PU8 _indx)  //... only one _pth at once
 264          {
 265   1        data U8 i,j,posx;
 266   1        PCHAR charPtr[4]; 
 267   1        
 268   1        _posx <<= 1;
 269   1        posx = _posx = _posx + BOX_OFFSET_X;    
 270   1        _posy <<= 3;
 271   1        _posy += BOX_OFFSET_Y;
 272   1        charPtr[0] = FONT_TABLE + (_indx[0]*32);
 273   1        charPtr[1] = FONT_TABLE + (_indx[1]*32);
 274   1        charPtr[2] = FONT_TABLE + (_indx[2]*32);
 275   1        charPtr[3] = FONT_TABLE + (_indx[3]*32);
 276   1        
 277   1        if(_len>4) _len=4;
 278   1        for(i=0; i<32; i+=2) {
 279   2          for(j=0; j<_len; j++) PCT_WriteOSDDataBufferX( j<<2, charPtr[j]+i);
 280   2          WriteByteOSD(0x05, posx);
 281   2          WriteByteOSD(0x07, _posy&0xff);
 282   2      
 283   2          WriteByteOSD(0x09, (((_len*4-1)<<4)|((_posy)>>8)<<2));      //... start: OSD_POS_V_ODD, end: OSD_POS_V_ODD
 284   2          WriteByteOSD(0x0A, 0x80|(ReadByteOSD(0x0A)&0x3F));        //... x path
 285   2          while(ReadOSDMemWr()&BIT7);                   //... wait finishing write for odd field
 286   2      
 287   2          WriteByteOSD(0x09, (((_len*4-1)<<4)|((_posy)>>8)<<2)|0x08);   //... start: OSD_POS_V_ODD, end: OSD_POS_V_
             -ODD
 288   2          WriteByteOSD(0x0A, 0x80|(ReadByteOSD(0x0A)&0x3F));        //... x path
 289   2          while(ReadOSDMemWr()&BIT7);                   //... wait finishing write for odd field
 290   2      
 291   2          _posy++;
 292   2        }
 293   1      }
 294          
 295          // ===========================================================================
 296          //
 297          // Clear 16x16 Dots for word, tatal N words
 298          // _posx  : Start point for Horizontal (unit = 8 Dots)
 299          // _posy  : Start point for Vertical   (unit = 8 Dots)
 300          // _len   : 1-4: 1-4 words
 301          //
C51 COMPILER V9.50a   OSDCTRL                                                              03/28/2018 18:26:36 PAGE 6   

 302          void PCT_ClearWordsPathX(U8 _posx, U16 _posy, U8 _len)  
 303          {
 304   1        register U8   wide;
 305   1        register U16 high;
 306   1      
 307   1        WriteByteOSD(0x00, backColor);    //... 1st pixel
 308   1        WriteByteOSD(0x01, backColor);    //... 2nd pixel
 309   1        WriteByteOSD(0x02, backColor);    //... 3rd pixel
 310   1        WriteByteOSD(0x03, backColor);    //... 4th pixel
 311   1      
 312   1        _posx <<= 1;
 313   1        _posx += BOX_OFFSET_X;    
 314   1        _posy <<= 3;
 315   1        _posy += BOX_OFFSET_Y;
 316   1      
 317   1        wide = _posx+(_len<<2)-1;
 318   1        high = _posy+15;
 319   1      
 320   1        WriteByteOSD(0x05, _posx);
 321   1        WriteByteOSD(0x06, wide);
 322   1        WriteByteOSD(0x07, _posy&0xff);
 323   1        WriteByteOSD(0x08, high&0xff);
 324   1        WriteByteOSD(0x09, 0x02|((_posy>>8)<<2)+(high>>8)); //... ~ even field
 325   1      
 326   1        WriteByteOSD(0x0A, 0xc0|ReadByteOSD(0x0A));     //... acceleration|x path
 327   1        while(ReadOSDMemWr()&BIT7){}  //... wait finishing write for even field
 328   1      }
 329          
 330          // ===========================================================================
 331          //
 332          // Draw 16 Dots to OSD Dtat Buuffer 0-15
 333          //
 334          void PCT_WriteOSDDataBufferY(U8 _index, PU8 _dat)
 335          {
 336   1        bitdat = _dat[0];
 337   1        WriteByteOSD(0x00, ((DAT_BIT7 ? (foreColor) : (backColor))<<4)|(DAT_BIT6 ? (foreColor) : (backColor)));   
             -//... 1st 2nd pixel
 338   1        WriteByteOSD(0x01, ((DAT_BIT5 ? (foreColor) : (backColor))<<4)|(DAT_BIT4 ? (foreColor) : (backColor)));   
             -//... 3rd 4th pixel
 339   1        WriteByteOSD(0x02, ((DAT_BIT3 ? (foreColor) : (backColor))<<4)|(DAT_BIT2 ? (foreColor) : (backColor)));   
             -//... 3rd 4th pixel
 340   1        WriteByteOSD(0x03, ((DAT_BIT1 ? (foreColor) : (backColor))<<4)|(DAT_BIT0 ? (foreColor) : (backColor)));   
             -//... 3rd 4th pixel
 341   1        WriteByteOSD(0x04, 0x80|_index++);      //... write to buffer
 342   1        
 343   1        bitdat = _dat[1];
 344   1        WriteByteOSD(0x00, ((DAT_BIT7 ? (foreColor) : (backColor))<<4)|(DAT_BIT6 ? (foreColor) : (backColor)));   
             -//... 1st 2nd pixel
 345   1        WriteByteOSD(0x01, ((DAT_BIT5 ? (foreColor) : (backColor))<<4)|(DAT_BIT4 ? (foreColor) : (backColor)));   
             -//... 3rd 4th pixel
 346   1        WriteByteOSD(0x02, ((DAT_BIT3 ? (foreColor) : (backColor))<<4)|(DAT_BIT2 ? (foreColor) : (backColor)));   
             -//... 3rd 4th pixel
 347   1        WriteByteOSD(0x03, ((DAT_BIT1 ? (foreColor) : (backColor))<<4)|(DAT_BIT0 ? (foreColor) : (backColor)));   
             -//... 3rd 4th pixel
 348   1        WriteByteOSD(0x04, 0x80|_index++);      //... write to buffer
 349   1      }
 350          
 351          // ===========================================================================
 352          //
 353          // Draw 16x16 Dots for word, tatal 8 words is 128 x 16 Dots
 354          // _posx  : Start point for Horizontal (unit = 8 Dots)
 355          // _posy  : Start point for Vertical   (unit = 8 Dots)
C51 COMPILER V9.50a   OSDCTRL                                                              03/28/2018 18:26:36 PAGE 7   

 356          // _len   : 1-4: 1-8 words
 357          // _index : Ascii code for string
 358          //
 359          void PCT_WriteOSDFntY(U8 _posx, U16 _posy, U8 _len, PU8 _indx)  //... only one _pth at once
 360          {
 361   1        data U8 i,j;
 362   1        PCHAR charPtr[8]; 
 363   1        
 364   1        _posx <<= 1;
 365   1        _posx += YFONT_OFFSET_X;
 366   1        _posy <<= 3;
 367   1        _posy += YFONT_OFFSET_Y;
 368   1      
 369   1        if(_len>8) _len=8;
 370   1        for(i=0; i<_len; i++)
 371   1          charPtr[i] = FONT_TABLE + (_indx[i]*32);
 372   1        
 373   1        for(i=0; i<32; i+=2) {
 374   2          for(j=0; j<_len; j++) PCT_WriteOSDDataBufferY( j<<1, charPtr[j]+i);
 375   2          WriteByteOSD(0x05, _posx);
 376   2          WriteByteOSD(0x07, _posy&0xff);
 377   2          WriteByteOSD(0x09, (((_len<<5)-0x10)|((_posy)>>8)<<2));     //... start: OSD_POS_V_ODD, end: OSD_POS_V_ODD
 378   2          WriteByteOSD(0x0A, 0x80|(ReadByteOSD(0x0A)&0x3F));        //... x path
 379   2          while(ReadOSDMemWr()&BIT7);             //... wait finishing write for odd field
 380   2          _posy++;
 381   2        }
 382   1      }
 383          
 384          //==================================================================================
 385          //
 386          // Show String on OSD
 387          //
 388          void PCT_ShowOSDString(U8 _path, U8 _addrx, U8 _addry, PCHAR _strptr)
 389          {
 390   1        register signed char slen;
 391   1      
 392   1        slen = strlen(_strptr);
 393   1        if(slen<0) return;
 394   1      #ifdef TW2835_FUNC_DEFINE  //Pinchi 20150324 add
 395   1        _ifBitSet(_path, PTH_X)
 396   1      #else
                ifBitSet(_path, PTH_X)
              #endif
 399   1        {
 400   2          do{
 401   3            PCT_WriteOSDFntX(_addrx, _addry, (U8) slen, _strptr);
 402   3            slen -= 4;
 403   3            _strptr+=4;
 404   3            _addrx+=8;
 405   3          }while(slen>0);
 406   2        } else {
 407   2          do{
 408   3            PCT_WriteOSDFntY(_addrx, _addry, (U8) slen, _strptr);
 409   3            slen -= 8;
 410   3            _strptr+=8;
 411   3            _addrx+=8;
 412   3          }while(slen>0);
 413   2        }
 414   1        PTC_SwitchToI2CMode();
 415   1      }
 416          
 417          
C51 COMPILER V9.50a   OSDCTRL                                                              03/28/2018 18:26:36 PAGE 8   

 418          // ===========================================================================
 419          // END of File 
 420          // ===========================================================================


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2400    ----
   CONSTANT SIZE    =   3744    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----      86
   DATA SIZE        =      3       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
