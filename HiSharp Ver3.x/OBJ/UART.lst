C51 COMPILER V9.60.0.0   UART                                                              06/18/2021 17:32:19 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\OBJ\UART.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE UART.c LARGE OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\OBJ\UAR
                    -T.lst) TABS(2) OBJECT(.\OBJ\UART.obj)

line level    source

   1          //  **************************************************************************
   2          //
   3          //       Copyright (c) 1992-2006 Professonal Computer Technology Co., Ltd
   4          //
   5          //      All rights are reserved. Reproduction in whole or in parts is
   6          //  prohibited without the prior written consent of the copyright owner.
   7          //  --------------------------------------------------------------------------
   8          //
   9          //  Module: UART.C
  10          //
  11          //  Purpose: Implementation of UART.
  12          //
  13          //  Version: 0.01                                   2006/10/22 10:39¤U¤È
  14          //
  15          //  Compiler: Keil 8051 C Compiler v7.2
  16          //
  17          //  Reference:
  18          //
  19          //
  20          //
  21          //  --------------------------------------------------------------------------
  22          //  Modification:
  23          //
  24          //  R0.01 2006/10/22 10:39¤U¤È Phoenix Chuang
  25          //  Reason:
  26          //    1. Original.
  27          //  Solution:
  28          //  
  29          //  **************************************************************************
  30          //  -----------------------------------
  31          //      Header Files
  32          //  ----------------------------------- 
  33          #include "Types.h"
  34          #include "UART.h"
  35          #include "Main.h"
  36          
  37          //  ------------------------------------
  38          //      Macro Definitions
  39          //  ------------------------------------ 
  40          
  41          
  42          //  ------------------------------------
  43          //      Type Definitions
  44          //  ------------------------------------
  45          
  46          
  47          //  ------------------------------------
  48          //      Variables Definitions
  49          //  ------------------------------------
  50          #define RS_RECV_MAX_BUFF 80
  51            
  52          //BYTE RS_RECVBUF[RS_RECV_MAX_BUFF];
  53          BYTE RsRxRp,RsRxWp;
  54          
C51 COMPILER V9.60.0.0   UART                                                              06/18/2021 17:32:19 PAGE 2   

  55          extern  BYTE  RS_in, RS_out;
  56          extern  BYTE  RS_buf[80/*BUF_MAX*/];
  57          
  58          
  59          //  ------------------------------------
  60          //      Function Prototypes
  61          //  ------------------------------------
  62          
  63          // ===========================================================================
  64          //                      Parallel function description
  65          // ===========================================================================
  66          //
  67          //    Initial UART                             
  68          //
  69          void InitialUART (void)
  70          {
  71   1        // Useing Interrupt RS
  72   1        PS=1;
  73   1        ES=1;
  74   1      
  75   1      //  // Useing Interrupt Timer1
  76   1      //  PT1=1;
  77   1      //  ET1=1;
  78   1      
  79   1      #if (TW2835_MCU == TW8816_MODEL_MEGAWIN)  //Pinchi 20150323 add
  80   1        TH1 = 0xf4;         // 24M HZ
  81   1      #elif (TW2835_MCU == TW8806_MODEL_WINBOND)
                TH1 = B9600;        // 40M HZ
              #else
                TH1 = SET_BAUDRATE(9600); // 22.118M HZ
              #endif
  86   1      
  87   1        TR1 = 1;          // Start timer 1
  88   1      
  89   1        RsRxRp = 0;
  90   1        RsRxWp = 0;
  91   1      }
  92          
  93          // ===========================================================================
  94          //
  95          //    Serial RX Check                            
  96          //
  97          BYTE RS_RxReady (void)
  98          {
  99   1        if( RsRxWp == RsRxRp ) return false;
 100   1        else return true;
 101   1      }
 102          
 103          //=============================================================================
 104          //
 105          //    Serial RX                              
 106          //
 107          BYTE RS_rx (void)
 108          {
 109   1        register BYTE ret;
 110   1          
 111   1        ES = 0;
 112   1        //Kane @HS 2007 0809 Ver3.5
 113   1        //if(RS_RECVBUF[RsRxRp+3]=='T' && RS_RECVBUF[RsRxRp+2]=='W' && RS_RECVBUF[RsRxRp+1]=='3'  && RS_RECVBUF[R
             -sRxRp]=='T' )
 114   1        //  return TWCMD;
 115   1        #if 0
C51 COMPILER V9.60.0.0   UART                                                              06/18/2021 17:32:19 PAGE 3   

                ret = RS_RECVBUF[RsRxRp];
                RsRxRp++;
                if(RsRxRp >= RS_RECV_MAX_BUFF) 
                  RsRxRp = 0;
                #else
 121   1          ret = RS_buf[RS_out];
 122   1      //  ret = DVR_buf[RS_out];
 123   1        RS_out++;
 124   1        if(RS_out >= RS_RECV_MAX_BUFF) 
 125   1          RS_out = 0;
 126   1        #endif
 127   1        ES = 1;
 128   1      
 129   1        return ret;
 130   1      }
 131          
 132          //=============================================================================
 133          //
 134          //    Serial TX                              
 135          //
 136          void RS_tx (BYTE tx_buf)
 137          {
 138   1        while(1) {
 139   2          if(TI) {
 140   3            SBUF = tx_buf;
 141   3            TI = 0;
 142   3            break;
 143   3          }
 144   2        }
 145   1      }
 146          
 147          // ===========================================================================
 148          //
 149          //    Serial Interrupt
 150          //
 151          void RS_interrupt(void) interrupt 4 using 1
 152          {
 153   1        if( RI ) {          //--- Receive interrupt ----
 154   2          RI = 0;
 155   2      
 156   2          #if 1//ryan@20170914
 157   2      #if 0
                  RS_RECVBUF[RsRxWp] = SBUF;
                  RsRxWp++;
                  if( RsRxWp >= RS_RECV_MAX_BUFF ) RsRxWp = 0;
              #else
 162   2          RS_buf [RS_in++] = SBUF;//USART_ReceiveData(USART1); 
 163   2            if( RS_in >= RS_RECV_MAX_BUFF)  RS_in = 0;
 164   2      
 165   2      #endif
 166   2          #else
                  if(RsRxWp+1==RsRxRp) RsRxRp++;
                  if(RsRxWp==RS_RECV_MAX_BUFF-1 && RsRxRp==0) RsRxRp++;
                  if( RsRxRp >= RS_RECV_MAX_BUFF ) RsRxRp = 0;
              
                  RS_RECVBUF[RsRxWp] = SBUF;
                  RsRxWp++;
                  if( RsRxWp >= RS_RECV_MAX_BUFF ) RsRxWp = 0;
                  #endif
 175   2          
 176   2        }
 177   1      }
C51 COMPILER V9.60.0.0   UART                                                              06/18/2021 17:32:19 PAGE 4   

 178          
 179          // ===========================================================================
 180          // END of File 
 181          // ===========================================================================
 182          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    139    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
